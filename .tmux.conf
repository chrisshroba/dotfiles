# Welcome to my tmux config!

# Some helpful notes to future me
#  - bind is an alias of bind-key (no difference).
#  - bind <key> binds the key after the prefix.
#  - bind -r <key> binds the key in the root table,
#    meaning no prefix is necessary.
#  -

# Put Plugins first because they may define behavior
# which I want to depend on or override.

########################## Plugins ############################

# TPM is Tmux Plugin Manager.  It manages installing the rest
# of the plugins.
# set -g @plugin 'tmux-plugins/tpm'

# This plugin sets some sensible defaults for tmux, including:
#  - binding prefix + a (or whatever key is your prefix key
#    with Ctrl) to switch to the last window you were in
#  - automatically reattach to user namespace, i.e. for
#    clipboard interaction (copy/paste)
set -g @plugin 'tmux-plugins/tmux-sensible'

######################## End Plugins ##########################


# set -g default-command "reattach-to-user-namespace -l zsh"

# Make it so when you set the window title,
# it is never automatically changed by tmux
set -g allow-rename off

# This enables mouse reporting.  It lets you:
#  - Click on a pane to activate it
#  - Right click a pane to `mark` it
#  - Drag borders to resize panes
setw -g mouse on

# Remap prefix from 'C-b' to 'C-a'
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Use prefix + | to split the pane into two panes
# vertically, and prefix + - for horizontal, because
# those characters look like the result of the split.
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
# Unbind the old split-window keys
unbind '"'
unbind %

# Bind Prefix + " to interactive window selection, similar
# to how it works in screen
bind '"' choose-tree -w

# Bind Prefix + r to reload the tmux config on the fly
bind r source-file ~/.tmux.conf

# Switch panes using Ctrl + Arrows with no Prefix
bind -n C-Left select-pane -L
bind -n C-Right select-pane -R
bind -n C-Up select-pane -U
bind -n C-Down select-pane -D

# # Smart pane switching with awareness of Vim splits.
# # See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n C-Left if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
# bind-key -n C-Down if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
# bind-key -n C-Up if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
# bind-key -n C-Right if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -T copy-mode-vi C-Left select-pane -L
# bind-key -T copy-mode-vi C-Down select-pane -D
# bind-key -T copy-mode-vi C-Up select-pane -U
# bind-key -T copy-mode-vi C-Right select-pane -R

# # Switch panes using Ctrl + Vim keys with no Prefix
# bind -n C-h select-pane -L
# bind -n C-l select-pane -R
# bind -n C-k select-pane -U
# bind -n C-j select-pane -D

# Resize panes using Ctrl + Shift + Arrows with no Prefix
bind -n C-S-Left resize-pane -L
bind -n C-S-Right resize-pane -R
bind -n C-S-Up resize-pane -U
bind -n C-S-Down resize-pane -D

# CAUTION: This doesn't seem to currently work.  TODO fix:
# More sane bindings for copy mode: v starts selection
# (like in vim), and y 'yanks' selection, aka putting it
# on the clipboard (both in tmux and on computer)
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection

# Update DISPLAY env variable so that programs that launch
# in X will work (i.e. meld)
set -g update-environment "DISPLAY"
# set -ga update-environment ' TERM'
set -g default-terminal "xterm-256color"


# Prefix + s swaps the current pane with the 'marked' pane
# (Prefix + m 'marks' a pane)
bind-key s swap-pane

# Prefix + k kills window with confirmation (just like
# Prefix + &)
bind k confirm-before -p "kill-window #W? (y/n)" kill-window

# Put tmux into vi mode.  This makes copy mode use vim-like
# key bindings instead of emacs-like bindings.
setw -g mode-keys vi

# Put the status bar at the top of the window instead of the\
# bottom
set -g status-position top

# This is some styling I like.  The current pane is black, all
# inactive panes are grey, all borders are the same color grey,
# and no lines are drawn (technically they are, but in the same
# color as the background, so they're invisible).
# set-window-option window-active-style 'fg=default, bg=colour232'
# set-window-option window-style 'fg=default, bg=colour234'
# set-window-option pane-border-style 'fg=colour234, bg=colour234'
# set-window-option pane-active-border-style 'fg=colour234, bg=colour234'
setw -g window-active-style 'fg=default, bg=default'
setw -g window-style 'fg=default, bg=default'
setw -g pane-border-style 'fg=default, bg=default'
setw -g pane-active-border-style 'fg=default, bg=default'

# Normally, the tmux config is only read when the tmux *server*
# starts, which happens super infrequently, so this makes every
# new window use the most up-to-date version of the config.
set-hook -g after-new-window 'source ~/.tmux.conf'

# Prompt for a window name every time a new window is created,
# because manual window names are far more descriptive than the
# automatic ones.
set-hook -g after-new-window "command-prompt -p \"Window name: \" \"rename-window '%%'\""

# set -g focus-events on
set -w -g focus-events on

set-option -g renumber-windows on

# -a makes the new window open just after the current window.
bind c new-window -a

bind / copy-mode \; send ?

# Initialize TMUX plugin manager
# This line should be kept at the end of the file.
# run '~/.tmux/plugins/tpm/tpm'
