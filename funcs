# Clear Screen
c() {
    for i in {1..$LINES}
    do
    	echo
    done
}

# cd to commonly used directories (manually specified in ~/.chd_dirs)
chd() {
    select dir in `cat ~/.chd_dirs`
    do
        cd $dir
        echo $dir
        break
    done
}

# Search Messages messages with pretty datetime
t() {
    sqlite3 ~/Library/Messages/chat.db "select is_from_me, datetime(date + strftime('%s','2001-01-01'), 'unixepoch'), handle.id, text from message, handle where handle_id=handle.rowid and text like '%$*%';"
}

# Send a file to shrobaserver to be served out of http://sdrop.shroba.io (secret because no auto_index)
sdrop () {
    scp $1 shroba:/var/www/html/sdrop/
    ssh shroba "find /var/www/html/sdrop/* -exec chmod +r {} \;"
}

# Send a file to shrobaserver to be served out of http://drop.shroba.io/
drop () {
    scp $1 shroba:/var/www/html/drop/
    ssh shroba "find /var/www/html/drop/* -exec chmod +r {} \;"
}


# Add the last alias created to my aliases file
addalias () {
	fc -l 1 | cut -d" " -f 4- | grep '^alias' | tail -n 1 >> ~/dotfiles/aliases
	exec zsh
}

# Forward port $1 to shrobaserver, accessible at http://remote.shroba.io
remote () {
    ssh -nNTR 4100:localhost:$1 shroba
}

# Add to Remember the Milk without waiting for completion
rtma () {
    # Spawn a subshell to not wait for completion
    # Suppress all output
    (
        rtm add "$@" 2&> 1 > /dev/null &
    )
    echo Added.
}

# Tell iTerm2 to set the profile to Default before every command (so that it's always
#  Default on this host)
precmd() {
    echo -e "\033]50;SetProfile=Default\a"
}

# Download a URL and save it as the same name as the file on the server
curls () {
    curl $1 > $(echo $1 | rev | cut -d "/" -f 1 | rev)
}

# Put the image that is currently on the clipboard on imgur
imgurp () {
	FILEPATH=$(mktemp).png
	pngpaste $FILEPATH
	imguru $FILEPATH
	rm $FILEPATH
}

command_exists () {
    type "$1" &> /dev/null ;
}

# Activate Virtualenv if cur directory or any ancestor directory has a venv/ folder in it
chpwd() {
    CURPATH="$(pwd)"
    command_exists deactivate; INVENV=$((1-$?))
    while [ $CURPATH != '/' ] # Traverse up the directory tree until we get to /
    do
        ACTIVATEPATH="$CURPATH/venv/bin/activate"
        if [ -f $ACTIVATEPATH ] #Check if activate script exists
        then
            if [[ $INVENV -eq 1 ]] && [[ "$VIRTUAL_ENV" == "$CURPATH/venv" ]] # Check if this venv already active
            then
                return # Already in a venv, and it's the right venv, so return
            else
                source $ACTIVATEPATH
                return
            fi
        fi
        CURPATH=$(dirname "$CURPATH")
    done

    # If we made it here, we didn't find a virtual env, so deactivate if in one
    if [ $INVENV -eq 1 ]
    then
        deactivate
    fi
}

